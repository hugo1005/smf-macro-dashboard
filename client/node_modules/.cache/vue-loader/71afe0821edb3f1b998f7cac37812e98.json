{"remainingRequest":"/Users/hugo/Dropbox/hugo_documents_folder/SMF_RISK/dashboard/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/hugo/Dropbox/hugo_documents_folder/SMF_RISK/dashboard/client/src/components/LineChart.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/hugo/Dropbox/hugo_documents_folder/SMF_RISK/dashboard/client/src/components/LineChart.vue","mtime":1610142088059},{"path":"/Users/hugo/Dropbox/hugo_documents_folder/SMF_RISK/dashboard/client/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hugo/Dropbox/hugo_documents_folder/SMF_RISK/dashboard/client/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/hugo/Dropbox/hugo_documents_folder/SMF_RISK/dashboard/client/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/hugo/Dropbox/hugo_documents_folder/SMF_RISK/dashboard/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hugo/Dropbox/hugo_documents_folder/SMF_RISK/dashboard/client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgpoMSB7CiAgICBjb2xvcjogd2hpdGU7CiAgICBmb250LWZhbWlseTogUm9ib3RvOwogICAgZm9udC1zaXplOiAxMHB4OwogICAgdGV4dC1hbGlnbjogbGVmdDsKICAgIHBhZGRpbmctbGVmdDogMTBweDsKICAgIHBhZGRpbmctYm90dG9tOiA1cHg7CiAgICBwYWRkaW5nLXRvcDogNXB4OwogICAgbWFyZ2luLXRvcDowcHg7CiAgICBiYWNrZ3JvdW5kOiAjYjIzZDNkMzA7Cn0KCmgxIHNwYW4gewogICAgbWFyZ2luLXJpZ2h0OiAxMHB4Owp9CgpwYXRoLmxpbmUgewogIGZpbGw6IG5vbmU7CiAgc3Ryb2tlOiB3aGl0ZTsKICBzdHJva2Utd2lkdGg6IDFweDsKfQoKLmdyaWQgbGluZSB7CiAgb3BhY2l0eTogMC4wNTsKICBjb2xvcjp3aGl0ZTsKfQoueEEgbGluZSB7CiAgb3BhY2l0eTogMC41Owp9CgoueEEgewogICAgY29sb3I6d2hpdGU7Cn0KCi55QSB7CiAgICBjb2xvcjp3aGl0ZTsKfQoKLypTb21lIGZhbmN5IGFuaW1hdGlvbiB0byBkcmF3IGNoYXJ0Ki8KLyogc3ZnIC5saW5lQ2hhcnQgPiBwYXRoIHsKICBzdHJva2U6ICNlY2JjM2E7CiAgc3Ryb2tlLXdpZHRoOiAzOwogIHN0cm9rZS1kYXNoYXJyYXk6IDQ4MTMuNzEzOwogIHN0cm9rZS1kYXNob2Zmc2V0OiA0ODEzLjcxMzsKfQoKLmFuaTIgc3ZnIC5saW5lQ2hhcnQgPiBwYXRoIHsKICBzdHJva2U6ICNlY2JjM2E7Cn0KLmFuaTEgc3ZnIC5saW5lQ2hhcnQgPiBwYXRoIHsKICBzdHJva2U6ICNlY2JjM2E7Cn0gKi8KCiNMYXllcl8xIHsKICB3aWR0aDogMTAwJTsKfQoKLnRleHQgewogIGRpc3BsYXk6IGlubGluZS1ibG9jazsKICBmb250LXNpemU6IDN2dzsKICBtYXJnaW46IDAuNXZ3IDAgMS41dnc7Cn0KCnN2ZyB7CiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIHJnYmEoMjU2LDI1NiwyNTYsMC4xKTsKICBtYXJnaW4tYm90dG9tOiAwOwp9CgouZmxvYXQtcmlnaHQgewogICAgZmxvYXQ6IHJpZ2h0Owp9Cg=="},{"version":3,"sources":["LineChart.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"LineChart.vue","sourceRoot":"src/components","sourcesContent":["<!-- \nGood example here bar chart ---[ https://stackoverflow.com/questions/48726636/draw-d3-axis-without-direct-dom-manipulation \n-->\n\n<template>\n    <div v-if=\"!loading\">\n        <h1><span v-bind:style={color:highlight[category]}>{{getShortendedCategory(category)}}</span>{{title}} <span class='float-right' v-if=\"show_pct\" :style=\"{color: getAttributionColor(getPctChange())}\">[{{getPctChange()}} %]</span></h1>\n        <svg :width=\"chartDefaults.width + chartDefaults.margin.left + chartDefaults.margin.right\" :height=\"chartDefaults.height + chartDefaults.margin.top + chartDefaults.margin.bottom\" v-bind:style=\"{\n            'background-image': 'linear-gradient(' + background[category] + '00,' + background[category] + ')'\n            }\">\n\n            <g class='lineChart' v-bind:transform=\"translate\">\n            \n            <axis class='yA' v-bind:scales=\"getScales().yAxis\" v-bind:chartDefaults='chartDefaults' v-bind:data='data' v-bind:trns='trnsY'/>\n            \n            <axis class='xA' v-bind:scales=\"getScales().xAxis\" v-bind:chartDefaults='chartDefaults' v-bind:data='data' v-bind:trns='trnsX()'/>\n            \n            <!-- <axis class='grid' v-bind:scales=\"getScales().yGrid\" v-bind:chartDefaults='chartDefaults' v-bind:data='data' v-bind:trns='trnsY' v-bind:style=\"{opacity: chartDefaults.gridOpacity}\"/> -->\n            \n            <path class='line' :d=\"line\"/>\n            <circle \n            :cx=\"getScales().x(data[this.data.length - 1].date)\" \n            :cy='getScales().y(data[this.data.length - 1].value)' \n            r='3' fill='#fff'>\n                  \n            </circle>\n            <text \n            :x=\"getScales().x(data[this.data.length - 1].date)\" \n            :y=\"getScales().y(data[this.data.length - 1].value)\"\n            :fill='highlight[category]'\n            dx=\"-10\"\n            dy='-10'\n            style='font-size: 10px;'\n            >{{roundData(data[this.data.length - 1].value,2)}}</text>  \n            \n            </g>\n            \n        </svg>\n        \n    </div>\n</template>\n\n<script>\nimport * as d3 from \"d3\";\nimport Axis from \"../components/Axis.vue\";\nimport axios from 'axios';\nimport {round} from 'mathjs';\n\nexport default {\n    name: \"vue-line-chart\",\n    components: {\n        axis: Axis // Using reusable component to draw x,y axis and Grid.\n    },\n    props: ['title', 'data','category', 'background','highlight','month_tick_interval', 'show_pct','short_category'],\n    data() {\n        return {\n        loading: true,\n        chartDefaults: {\n            width: 160,\n            height: 100,\n            chartId: \"linechart-vue\",\n            margin: {\n                top: 5,\n                right: 0,\n                bottom: 30,\n                left: 50\n            },\n            gridOpacity: 1,\n            data: []\n        },\n        line: \"\",\n        //Translate co-ords for chart, x axis and yaxis. This is injected into template\n        translate: \"translate(\" + 35 + \",\" + 5 + \")\",\n        trnsY: \"translate(0,0)\",\n        trnsX: this.getTrnsx,\n        toggleClass: true\n        };\n    }, \n    created() {\n        this.calculatePath();\n        this.loading = false\n    },\n    methods: {\n        getShortendedCategory: function(cat) { \n            if(this.short_category) {\n                return this.short_category[cat]\n            } else {\n                return cat\n            }\n            \n        },\n        getAttributionColor: function(r_unscaled) {\n            if(r_unscaled >= 0) {\n                return '#86AD3B'\n            } else {\n                return '#AD3B3B'\n            }\n        },\n        roundData(d, digits) {\n            return round(d, digits)\n        },\n        getPctChange() {\n            let last = this.data[this.data.length - 1].value\n            let first = this.data[0].value\n            let pct = (( last / first) - 1) * 100\n            return this.roundData(pct, 2)\n        },\n        getScales() {\n            console.log(\"Drawing scales...\")\n            console.log(this.data[0].date)\n            // All the maths to work chart co ordinates and woring out Axis\n\n            const y_extent = d3.extent(this.data, d => d.value);\n\n            const x = d3\n                .scaleTime()\n                .domain(\n                    d3.extent(this.data, function(d) {\n                        return d.date;\n                    })\n                )\n                .rangeRound([0, this.chartDefaults.width - this.chartDefaults.width * 0]);\n            const y = d3\n                .scaleLinear()\n                .domain([y_extent[0] - (y_extent[1]-y_extent[0])*0.2, y_extent[1] + (y_extent[1]-y_extent[0])*0.2])\n                .range([this.chartDefaults.height, 0]);\n\n            d3.axisBottom().scale(x);\n            d3.axisLeft().scale(y);\n\n            //Key funtions to draw X-axis,YAxis and the grid. All uses component axis\n            //play around with time format to get it to display as you want : d3.timeFormat(\"%b-%d\")\n            var xAxis = d3\n                .axisBottom()\n                .scale(x)\n                .ticks(d3.timeMonth.every(this.month_tick_interval))\n                .tickFormat(d3.timeFormat('%b-%y'));\n\n            var yAxis = d3\n                .axisLeft()\n                .scale(y)\n                .ticks(5);\n                \n            var yGrid = d3\n                .axisLeft()\n                .scale(y)\n                .tickSize(-(this.chartDefaults.width - 100), 0, 0)\n                .tickFormat(\"\");\n\n            // Return the key calculations and functions to draw the chart\n            return {\n                x,\n                y,\n                xAxis,\n                yAxis,\n                yGrid\n            };\n        },\n        getTrnsx(chartDefaults) {\n        //works out translate value in realtive to dynamic height\n        const t = \"translate(0,\" + this.chartDefaults.height + \")\";\n        return t;\n        },\n        calculatePath() {\n            console.log(\"Drawing path\")\n            //Get key calculation funtions to draw chart , Ie scale, axis mapping and plotting\n            const scale = this.getScales();\n            // Define calcultion to draw chart\n            const path = d3\n                .line()\n                .x(d => {\n                    return scale.x(d.date);\n                })\n                .y(d => {\n                    return scale.y(d.value);\n                })\n\n            // draw line then this.line is injected into the template\n            this.line = path(this.data);\n        }\n    }\n};\n</script>\n<!-- css loaderhttps://vue-loader.vuejs.org/guide/scoped-css.html#mixing-local-and-global-styles -->\n<style>\nh1 {\n    color: white;\n    font-family: Roboto;\n    font-size: 10px;\n    text-align: left;\n    padding-left: 10px;\n    padding-bottom: 5px;\n    padding-top: 5px;\n    margin-top:0px;\n    background: #b23d3d30;\n}\n\nh1 span {\n    margin-right: 10px;\n}\n\npath.line {\n  fill: none;\n  stroke: white;\n  stroke-width: 1px;\n}\n\n.grid line {\n  opacity: 0.05;\n  color:white;\n}\n.xA line {\n  opacity: 0.5;\n}\n\n.xA {\n    color:white;\n}\n\n.yA {\n    color:white;\n}\n\n/*Some fancy animation to draw chart*/\n/* svg .lineChart > path {\n  stroke: #ecbc3a;\n  stroke-width: 3;\n  stroke-dasharray: 4813.713;\n  stroke-dashoffset: 4813.713;\n}\n\n.ani2 svg .lineChart > path {\n  stroke: #ecbc3a;\n}\n.ani1 svg .lineChart > path {\n  stroke: #ecbc3a;\n} */\n\n#Layer_1 {\n  width: 100%;\n}\n\n.text {\n  display: inline-block;\n  font-size: 3vw;\n  margin: 0.5vw 0 1.5vw;\n}\n\nsvg {\n  border-bottom: 1px solid rgba(256,256,256,0.1);\n  margin-bottom: 0;\n}\n\n.float-right {\n    float: right;\n}\n</style>\n"]}]}